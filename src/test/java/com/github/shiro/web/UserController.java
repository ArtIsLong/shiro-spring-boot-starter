/** * $Id: UserController.java,v 1.0 2018-12-15 12:54 chenmin Exp $ * <p> */package com.github.shiro.web;import com.github.shiro.bean.DefaultUser;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.AuthenticationException;import org.apache.shiro.authc.IncorrectCredentialsException;import org.apache.shiro.authc.LockedAccountException;import org.apache.shiro.authc.UsernamePasswordToken;import org.apache.shiro.subject.Subject;import org.crazycake.shiro.RedisSessionDAO;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;/** * @author chenmin * @version $Id: UserController.java,v 1.1 2018-12-15 12:54 chenmin Exp $ * Created on 2018-12-15 12:54 */@Api@RestController@RequestMapping("/user")public class UserController {    @Autowired    private RedisSessionDAO redisSessionDAO;    @ApiOperation("登录")    @PostMapping("/login")    public Object login(@RequestBody DefaultUser user) {        Subject subject = SecurityUtils.getSubject();        UsernamePasswordToken token = new UsernamePasswordToken(user.getUserName(), user.getPassword());        try {            // 登录            subject.login(token);            // 登录成功后，获取菜单权限信息            if (subject.isAuthenticated()) {                return "登录成功";            }        } catch (IncorrectCredentialsException e) {            return "密码错误";        } catch (LockedAccountException e) {            return "登录失败，该用户已被冻结";        } catch (AuthenticationException e) {            return "该用户不存在";        } catch (Exception e) {            return e.getMessage();        }        return "登录失败";    }    @ApiOperation("注销")    @PostMapping("/logout")    public Object logout() {        Subject subject = SecurityUtils.getSubject();        redisSessionDAO.delete(subject.getSession());        return "注销成功";    }    @ApiOperation("未登录提示信息接口")    @RequestMapping("/noLogin")    public Object noLogin() {        return "未登录，请先登录再访问";    }    @ApiOperation("需登录才能访问")    @PostMapping("/home")    public Object home() {        return "这是主页";    }}