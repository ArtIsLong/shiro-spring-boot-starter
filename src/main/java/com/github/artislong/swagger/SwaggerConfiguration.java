/** * $Id: SwaggerConfiguration.java,v 1.0 2019-01-24 13:54 chenmin Exp $ * <p> */package com.github.artislong.swagger;import com.google.common.base.Predicate;import com.google.common.base.Predicates;import com.spring4all.swagger.SwaggerAutoConfiguration;import com.spring4all.swagger.SwaggerProperties;import org.springframework.boot.autoconfigure.AutoConfigureAfter;import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.boot.context.properties.EnableConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.util.ObjectUtils;import springfox.documentation.builders.ApiInfoBuilder;import springfox.documentation.builders.PathSelectors;import springfox.documentation.builders.RequestHandlerSelectors;import springfox.documentation.service.ApiInfo;import springfox.documentation.service.Contact;import springfox.documentation.spi.DocumentationType;import springfox.documentation.spring.web.plugins.Docket;import springfox.documentation.swagger.web.UiConfiguration;import springfox.documentation.swagger.web.UiConfigurationBuilder;import springfox.documentation.swagger2.annotations.EnableSwagger2;import java.util.ArrayList;import java.util.List;/** * @author 陈敏 * @version $Id: SwaggerConfiguration.java,v 1.1 2019-01-24 13:54 chenmin Exp $ * Created on 2019-01-24 13:54 * My blog： https://www.chenmin.info */@EnableSwagger2@Configuration@ConditionalOnProperty(name = "security.shiro.test")@AutoConfigureAfter(SwaggerAutoConfiguration.class)@EnableConfigurationProperties(SwaggerProperties.class)public class SwaggerConfiguration {    public static final String SHIRO_DOCKET = "shiroDocket";    @Bean    @ConditionalOnMissingBean    @ConfigurationProperties(prefix = "swagger")    public SwaggerProperties swaggerProperties() {        return new SwaggerProperties();    }    @Bean    @ConditionalOnMissingBean(UiConfiguration.class)    public UiConfiguration uiConfiguration(SwaggerProperties swaggerProperties) {        return UiConfigurationBuilder.builder()                .deepLinking(swaggerProperties.getUiConfig().getDeepLinking())                .defaultModelExpandDepth(swaggerProperties.getUiConfig().getDefaultModelExpandDepth())                .defaultModelRendering(swaggerProperties.getUiConfig().getDefaultModelRendering())                .defaultModelsExpandDepth(swaggerProperties.getUiConfig().getDefaultModelsExpandDepth())                .displayOperationId(swaggerProperties.getUiConfig().getDisplayOperationId())                .displayRequestDuration(swaggerProperties.getUiConfig().getDisplayRequestDuration())                .docExpansion(swaggerProperties.getUiConfig().getDocExpansion())                .maxDisplayedTags(swaggerProperties.getUiConfig().getMaxDisplayedTags())                .operationsSorter(swaggerProperties.getUiConfig().getOperationsSorter())                .showExtensions(swaggerProperties.getUiConfig().getShowExtensions())                .tagsSorter(swaggerProperties.getUiConfig().getTagsSorter())                .validatorUrl(swaggerProperties.getUiConfig().getValidatorUrl())                .build();    }    @Bean(SHIRO_DOCKET)    public Docket shiroDocket(SwaggerProperties swaggerProperties) {        SwaggerProperties.DocketInfo docketInfo = swaggerProperties().getDocket().get(SHIRO_DOCKET);        if (ObjectUtils.isEmpty(docketInfo)) {            docketInfo = new SwaggerProperties.DocketInfo();        }        // base-path处理        // 当没有配置任何path的时候，解析/**        if (docketInfo.getBasePath().isEmpty()) {            docketInfo.getBasePath().add("/**");        }        List<Predicate<String>> basePath = new ArrayList();        for (String path : docketInfo.getBasePath()) {            basePath.add(PathSelectors.ant(path));        }        // exclude-path处理        List<Predicate<String>> excludePath = new ArrayList();        for (String path : docketInfo.getExcludePath()) {            excludePath.add(PathSelectors.ant(path));        }        Docket docketForBuilder = new Docket(DocumentationType.SWAGGER_2)                .host(swaggerProperties().getHost())                .apiInfo(apiInfo(swaggerProperties));        Docket docket = docketForBuilder.groupName(SHIRO_DOCKET)                .select()                .apis(RequestHandlerSelectors.basePackage(docketInfo.getBasePackage()))                .apis(RequestHandlerSelectors.basePackage("com.github.artislong.web"))                .paths(                        Predicates.and(                                Predicates.not(Predicates.or(excludePath)),                                Predicates.or(basePath)                        )                )                .build();        /* ignoredParameterTypes **/        Class<?>[] array = new Class[docketInfo.getIgnoredParameterTypes().size()];        Class<?>[] ignoredParameterTypes = docketInfo.getIgnoredParameterTypes().toArray(array);        docket.ignoredParameterTypes(ignoredParameterTypes);        return docket;    }    public ApiInfo apiInfo(SwaggerProperties swaggerProperties) {        ApiInfo apiInfo = new ApiInfoBuilder()                .title(swaggerProperties.getTitle().isEmpty() ? "Shiro默认测试接口" : swaggerProperties.getTitle())                .description(swaggerProperties.getDescription().isEmpty() ? "Shiro默认测试接口" : swaggerProperties.getDescription())                .version(swaggerProperties.getVersion().isEmpty() ? "1.0" : swaggerProperties.getVersion())                .license(swaggerProperties.getLicense().isEmpty() ? "Apache License, Version 2.0" : swaggerProperties.getLicense())                .licenseUrl(swaggerProperties.getLicenseUrl().isEmpty() ? "https://www.apache.org/licenses/LICENSE-2.0.html" : swaggerProperties.getLicenseUrl())                .contact(                        new Contact(                                swaggerProperties.getContact().getName().isEmpty() ? "陈敏" : swaggerProperties.getContact().getName(),                                swaggerProperties.getContact().getUrl().isEmpty() ? "https://www.chenmin.info" : swaggerProperties.getContact().getUrl(),                                swaggerProperties.getContact().getEmail().isEmpty() ? "chenmin049@163.com" : swaggerProperties.getContact().getEmail()                        )                )                .termsOfServiceUrl(swaggerProperties.getTermsOfServiceUrl().isEmpty() ? "" : swaggerProperties.getTermsOfServiceUrl())                .build();        return apiInfo;    }}