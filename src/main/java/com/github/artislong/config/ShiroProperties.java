/** * $Id: ShiroProperties.java,v 1.0 7/9/18 4:37 PM chenmin Exp $ * <p> */package com.github.artislong.config;import com.github.artislong.shiro.DefaultFormAuthenticationFilter;import com.github.artislong.util.DefaultFilterType;import com.google.common.collect.Maps;import lombok.Data;import lombok.extern.slf4j.Slf4j;import org.apache.shiro.web.filter.mgt.DefaultFilter;import org.springframework.beans.factory.InitializingBean;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.util.ObjectUtils;import javax.servlet.Filter;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import java.util.Map;/** * @author chenmin * @version $Id: ShiroProperties.java,v 1.1 7/9/18 4:37 PM chenmin Exp $ * Created on 7/9/18 4:37 PM */@Slf4j@Data@ConfigurationProperties(prefix = "security.shiro")public class ShiroProperties implements InitializingBean {    /**     * Swagger资源路径     */    private static final String[] SWAGGER_RESOURCE_PATH = {"/api/v1/**",            "/v2/api-docs",            "/swagger-ui.html",            "/webjars/**",            "/swagger-resources/**"};    private static final String DEFAULT_USERNAME = "admin";    private static final String DEFAULT_PASSWORD = "admin";    private Boolean test;    private Boolean enabled = true;    /**     * 是否开启shiro注解支持     */    private Boolean annotationEnabled;    /**     * 登录Url(没有登录的用户请求需要登录的页面时自动跳转到登录页面)     */    private String loginUrl;    /**     * 登录成功Url(登录成功默认跳转页面，不配置则跳转至”/”，可以不配置，直接通过代码进行处理)     */    private String successUrl;    /**     * 未经授权的Url(没有权限默认跳转的页面，登录的用户访问了没有被授权的资源自动跳转到的页面)     */    private String unauthorizedUrl;    /**     * 没登录访问时的转发Url(做未登录提示信息用)     */    @Deprecated    private String noAccessUrl;    /**     * Shiro请求拦截规则配置(shiro的拦截器规则，常用的anon和authc)     */    private Map<DefaultFilterType, List<String>> filterPattern = Maps.newLinkedHashMap();    /**     * 默认用户名     */    private String defaultUserName = DEFAULT_USERNAME;    /**     * 默认密码     */    private String defaultPassword = DEFAULT_PASSWORD;    /**     * 自定义Filter     */    private ShiroFilter shiroFilter;    private ShiroSession session;    @Data    public static class ShiroSession {        /**         * Shiro Session 过期时间（分钟）         */        private Long globalSessionTimeout = 30L;        /**         * 是否删除过期Session         */        private Boolean deleteInvalidSessions = true;        /**         * 是否定时检查Session         */        private Boolean sessionValidationSchedulerEnabled = true;        /**         * session是否可以被保存到cookie中         */        private Boolean sessionIdCookieEnabled = false;        /**         * 是否去掉URL中的JSESSIONID         */        private Boolean sessionIdUrlRewritingEnabled = false;    }    /**     * 自定义ShiroFilter配置     */    @Data    public static class ShiroFilter {        private Map<DefaultFilterType, Class<? extends Filter>> filters = Maps.newLinkedHashMap();        private Map<DefaultFilterType, Map<String, String>> attributes = Maps.newLinkedHashMap();    }    @Override    public void afterPropertiesSet() throws Exception {        if (ObjectUtils.isEmpty(shiroFilter)) {            shiroFilter = new ShiroFilter();        }        if (!ObjectUtils.isEmpty(this.shiroFilter)) {            Map<DefaultFilterType, Map<String, String>> attributes = this.shiroFilter.getAttributes();            Map<DefaultFilterType, Class<? extends Filter>> filters = this.shiroFilter.getFilters();            attributes.forEach((defaultFilterType, attribute) -> {                if (!ObjectUtils.isEmpty(attribute)) {                    if (filters.containsKey(defaultFilterType)) {                        filters.put(defaultFilterType, DefaultFilter.valueOf(defaultFilterType.getValue()).getFilterClass());                    }                }            });        }        Map<DefaultFilterType, Class<? extends Filter>> filters = shiroFilter.getFilters();        Map<DefaultFilterType, Map<String, String>> attributes = shiroFilter.getAttributes();        if (!filters.containsKey(DefaultFilterType.authc)) {            // 设置默认authc拦截器            filters.put(DefaultFilterType.authc, DefaultFormAuthenticationFilter.class);            Map<String, String> attribute = null;            if (!attributes.containsKey(DefaultFilterType.authc)) {                attribute = Maps.newHashMap();            } else {                attribute = attributes.get(DefaultFilterType.authc);            }            // 设置默认未登录请求跳转地址            if (!attribute.containsKey(DefaultFormAuthenticationFilter.NO_ACCESS_URL)) {                attribute.put(DefaultFormAuthenticationFilter.NO_ACCESS_URL, "/default/noLogin");            }            attributes.put(DefaultFilterType.authc, attribute);        }        if (!filterPattern.containsKey(DefaultFilterType.authc)) {            filterPattern.put(DefaultFilterType.authc, Arrays.asList("/**"));        }        List<String> filterPatterns = filterPattern.get(DefaultFilterType.anon);        if (ObjectUtils.isEmpty(filterPatterns)) {            filterPatterns = new ArrayList<String>();        }        for (String swaggerPath : SWAGGER_RESOURCE_PATH) {            if (!filterPatterns.contains(swaggerPath)) {                filterPatterns.add(swaggerPath);            }        }        filterPattern.put(DefaultFilterType.anon, filterPatterns);    }}