/** * $Id: ShiroProperties.java,v 1.0 7/9/18 4:37 PM chenmin Exp $ * <p> */package com.github.shiro.config.shiro;import lombok.Data;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.InitializingBean;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.util.ObjectUtils;import javax.servlet.Filter;import java.util.Arrays;import java.util.HashMap;import java.util.List;import java.util.Map;/** * @author chenmin * @version $Id: ShiroProperties.java,v 1.1 7/9/18 4:37 PM chenmin Exp $ * Created on 7/9/18 4:37 PM */@Slf4j@Data@ConfigurationProperties(prefix = "security.shiro")public class ShiroProperties implements InitializingBean {    /**     * 是否开启shiro注解支持     */    private Boolean annotationEnabled;    /**     * 登录Url     */    private String loginUrl;    /**     * 没权限访问时的转发Url(做未登录提示信息用)     */    @Deprecated    private String noAccessUrl;    /**     * Shiro请求拦截规则配置(shiro的拦截器规则，常用的anon和authc)     */    private Map<String, List<String>> filterPattern = new HashMap<String, List<String>>();    /**     * Shiro Session 过期时间（分钟）     */    private Long globalSessionTimeout = 30L;    /**     * 默认用户名     */    private String defaultUserName;    /**     * 默认密码     */    private String defaultPassword;    /**     * 自定义Filter     */    private ShiroFilter shiroFilter;    @Data    public static class ShiroFilter {        private Map<String, Class<? extends Filter>> filters = new HashMap<String, Class<? extends Filter>>();        private Map<String, Map<String, String>> attributes = new HashMap<String, Map<String, String>>();    }    @Override    public void afterPropertiesSet() throws Exception {        if (ObjectUtils.isEmpty(loginUrl)) {            log.warn("loginUrl is Empty!");        }        if (ObjectUtils.isEmpty(loginUrl)) {            log.warn("loginUrl is Empty!");        }        if (ObjectUtils.isEmpty(shiroFilter)) {            shiroFilter = new ShiroFilter();            Map<String, Class<? extends Filter>> filters = new HashMap<String, Class<? extends Filter>>();            filters.put("authc", SelfDefinedFormAuthenticationFilter.class);            // 设置默认authc拦截器            shiroFilter.setFilters(filters);            Map<String, Map<String, String>> attributes = new HashMap<String, Map<String, String>>();            Map<String, String> attribute = new HashMap<String, String>();            // 设置默认未登录请求跳转地址            attribute.put("noAccessUrl", "/default/noLogin");            attributes.put("authc", attribute);            shiroFilter.setAttributes(attributes);        }        if (ObjectUtils.isEmpty(filterPattern)) {            filterPattern = new HashMap<String, List<String>>();            filterPattern.put("anon",                    Arrays.asList("/api/v1/**",                            "/v2/api-docs",                            "/swagger-ui.html",                            "/webjars/**",                            "/swagger-resources/**",                            "/default/login",                            "/default/noLogin"));            filterPattern.put("authc", Arrays.asList("/**"));        }    }}