/** * $Id: DefaultController.java,v 1.0 2019-01-21 11:01 chenmin Exp $ * <p> */package com.github.shiro.web;import com.github.shiro.bean.DefaultUser;import com.github.shiro.util.SecurityUtils;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;import lombok.extern.slf4j.Slf4j;import org.apache.shiro.authc.AuthenticationException;import org.apache.shiro.authc.IncorrectCredentialsException;import org.apache.shiro.authc.LockedAccountException;import org.apache.shiro.subject.Subject;import org.crazycake.shiro.RedisSessionDAO;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;import org.springframework.util.ObjectUtils;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;/** * @author chenmin * @version $Id: DefaultController.java,v 1.1 2019-01-21 11:01 chenmin Exp $ * Created on 2019-01-21 11:01 */@Slf4j@Api("默认Controller")@RestController@RequestMapping("/default")@ConditionalOnProperty(name = "security.shiro.test")public class DefaultController {    @Autowired    private RedisSessionDAO redisSessionDAO;    /**     * 默认登录接口     * @param user 默认登录信息，需传入userName和password     * @return 登录成功或失败信息     */    @ApiOperation("登录接口")    @PostMapping("/login")    public String login(@RequestBody DefaultUser user) {        String msg = "";        try {            Subject subject = SecurityUtils.login(user.getUserName(), user.getPassword());            // 登录成功后，获取菜单权限信息            if (!ObjectUtils.isEmpty(subject)) {                DefaultUser currentUser = SecurityUtils.getCurrentUser(user.getClass());                log.info(currentUser.toString());                msg = "登录成功！";            }        } catch (IncorrectCredentialsException e) {            msg = "密码错误！";        } catch (LockedAccountException e) {            msg = "登录失败，该用户已被冻结！";        } catch (AuthenticationException e) {            msg = "该用户不存在！";        } catch (Exception e) {            msg = e.getMessage();        }        return msg;    }    /**     * 注销接口     * @return 注销成功信息     */    @ApiOperation("注销接口")    @RequestMapping("/logout")    public String logout() {        Subject subject = SecurityUtils.getSubject();        redisSessionDAO.delete(subject.getSession());        return "注销成功！";    }    /**     * 此处不指定具体请求方式(GET/POST/PUT/DELETE...)，可以接受所有类型的未登录请求跳转到此URL中     * @return 未登录提示信息     */    @ApiOperation("未登录提示信息接口")    @RequestMapping("/noLogin")    public String noLogin() {        return "当前用户未登录，请先登录再次访问！";    }    /**     * 默认测试接口     * @return 测试提示信息     */    @ApiOperation("需登录才能访问")    @PostMapping("/home")    public Object home() {        return "这是主页！";    }}