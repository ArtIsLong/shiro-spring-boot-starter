/** * $Id: ShiroConfiguration.java,v 1.0 18/5/4 下午9:37 chenmin Exp $ * <p> */package com.example.config.shiro;import org.apache.shiro.authc.credential.HashedCredentialsMatcher;import org.apache.shiro.mgt.SecurityManager;import org.apache.shiro.realm.AuthorizingRealm;import org.apache.shiro.session.mgt.SessionManager;import org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;import org.apache.shiro.spring.web.ShiroFilterFactoryBean;import org.apache.shiro.web.mgt.DefaultWebSecurityManager;import org.crazycake.shiro.RedisCacheManager;import org.crazycake.shiro.RedisManager;import org.crazycake.shiro.RedisSessionDAO;import org.crazycake.shiro.serializer.StringSerializer;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.data.redis.RedisProperties;import org.springframework.boot.context.properties.EnableConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.util.ObjectUtils;import javax.servlet.Filter;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;/** * @author chenmin * @version $Id: ShiroConfiguration.java,v 1.1 18/5/4 下午9:37 chenmin Exp $ * Created on 18/5/4 下午9:37 */@Configuration@EnableConfigurationProperties(ShiroProperties.class)public class ShiroConfiguration {    @Autowired    private RedisProperties redisProperties;    @Autowired    private ShiroProperties shiroProperties;    @Bean    public ShiroFilterFactoryBean shiroFilterFactoryBean(SecurityManager securityManager) {        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();        //获取filters        Map<String, Filter> filters = shiroFilterFactoryBean.getFilters();        //将自定义 的FormAuthenticationFilter注入shiroFilter中        filters.put("authc", new SelfDefinedFormAuthenticationFilter().                setNoAccessUrl(shiroProperties.getNoAccessUrl()));        shiroFilterFactoryBean.setSecurityManager(securityManager);        Map<String, String> filterChainDefinitionMap = new LinkedHashMap<String, String>();        //注意过滤器配置顺序 不能颠倒        Map<String, List<String>> filterMap = shiroProperties.getFilter();        filterMap.forEach((filter, urls) -> {            urls.forEach(url -> {                filterChainDefinitionMap.put(url, filter);            });        });        // 配置shiro默认登录界面地址，前后端分离中登录界面跳转应由前端路由控制，后台仅返回json数据        shiroFilterFactoryBean.setLoginUrl(shiroProperties.getLoginUrl());        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);        return shiroFilterFactoryBean;    }    /**     * 凭证匹配器(密码需要加密时，可使用)     * @return     */    @Bean    public HashedCredentialsMatcher hashedCredentialsMatcher() {        HashedCredentialsMatcher hashedCredentialsMatcher = new HashedCredentialsMatcher();        // 设置加密算法 Md5Hash        hashedCredentialsMatcher.setHashAlgorithmName("md5");        // 设置散列加密次数 如：2=md5(md5(aaa))        hashedCredentialsMatcher.setHashIterations(2);        return hashedCredentialsMatcher;    }    @Bean    public SecurityManager securityManager(            AuthorizingRealm authorizingRealm,            SessionManager sessionManager,            RedisCacheManager redisCacheManager) {        DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();        securityManager.setRealm(authorizingRealm);        // 自定义的Session管理        securityManager.setSessionManager(sessionManager);        // 自定义的缓存实现        securityManager.setCacheManager(redisCacheManager);        return securityManager;    }    /**     * 自定义的SessionManager     * @param redisSessionDAO     * @return     */    @Bean    public SessionManager sessionManager(RedisSessionDAO redisSessionDAO) {        SelfDefinedSessionManager sessionManager = new SelfDefinedSessionManager();        sessionManager.setSessionDAO(redisSessionDAO);        sessionManager.setGlobalSessionTimeout(shiroProperties.getGlobalSessionTimeout() * 60 * 1000);        return sessionManager;    }    /**     * 配置shiro redisManager     * 使用的是shiro-redis开源插件     * @return     */    @Bean    public RedisManager redisManager() {        RedisManager redisManager = new RedisManager();        redisManager.setHost(redisProperties.getHost());        redisManager.setPort(redisProperties.getPort());        redisManager.setTimeout(redisProperties.getTimeout());        if (!ObjectUtils.isEmpty(redisProperties.getPassword())) {            redisManager.setPassword(redisProperties.getPassword());        }        return redisManager;    }    /**     * cacheManager 缓存 redis实现     * 使用的是shiro-redis开源插件     * @param redisManager     * @return     */    @Bean    public RedisCacheManager redisCacheManager(RedisManager redisManager) {        RedisCacheManager redisCacheManager = new RedisCacheManager();        redisCacheManager.setRedisManager(redisManager);        redisCacheManager.setValueSerializer(new StringSerializer());        return redisCacheManager;    }    /**     * RedisSessionDAO shiro sessionDao层的实现 redis实现     * 使用的是shiro-redis开源插件     * @param redisManager     * @return     */    @Bean    public RedisSessionDAO redisSessionDAO(RedisManager redisManager) {        RedisSessionDAO redisSessionDAO = new RedisSessionDAO();        redisSessionDAO.setRedisManager(redisManager);        return redisSessionDAO;    }    /**     * 开启shiro aop注解支持     * @param securityManager     * @return     */    @Bean    public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(SecurityManager securityManager) {        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor =                new AuthorizationAttributeSourceAdvisor();        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);        return authorizationAttributeSourceAdvisor;    }    @Bean    public SelfDefinedShiroRealm shiroRealm() {        return new SelfDefinedShiroRealm();    }}