/** * $Id: DefaultSessionManager.java,v 1.0 18/5/4 下午9:31 chenmin Exp $ * <p> */package info.chenmin.shiro.shiro;import org.apache.shiro.session.Session;import org.apache.shiro.session.UnknownSessionException;import org.apache.shiro.session.mgt.SessionKey;import org.apache.shiro.web.servlet.ShiroHttpServletRequest;import org.apache.shiro.web.session.mgt.DefaultWebSessionManager;import org.apache.shiro.web.session.mgt.WebSessionKey;import org.apache.shiro.web.util.WebUtils;import org.springframework.util.StringUtils;import javax.servlet.ServletRequest;import javax.servlet.ServletResponse;import java.io.Serializable;/** * 自定义Session管理器 * * @author chenmin * @version $Id: DefaultSessionManager.java,v 1.1 18/5/4 下午9:31 chenmin Exp $ * Created on 18/5/4 下午9:31 */public class DefaultSessionManager extends DefaultWebSessionManager {    public static final String AUTHORIZATION = "Authorization";    public static final String REFERENCED_SESSION_ID_SOURCE = "Stateless request";    public DefaultSessionManager() {        super();    }    @Override    protected Serializable getSessionId(ServletRequest request, ServletResponse response) {        String id = WebUtils.toHttp(request).getHeader(AUTHORIZATION);        // 如果请求头中有Authorization，则其值为sessionId        if (!StringUtils.isEmpty(id)) {            request.setAttribute(ShiroHttpServletRequest.REFERENCED_SESSION_ID_SOURCE, REFERENCED_SESSION_ID_SOURCE);            request.setAttribute(ShiroHttpServletRequest.REFERENCED_SESSION_ID, id);            request.setAttribute(ShiroHttpServletRequest.REFERENCED_SESSION_ID_IS_VALID, Boolean.TRUE);            return id;        } else {            // 否则按默认规则从cookie取sessionId            return super.getSessionId(request, response);        }    }    /**     * 解决默认SessionManager多次从缓存中查询Session的问题     * @param sessionKey     * @return     * @throws UnknownSessionException     */    @Override    protected Session retrieveSession(SessionKey sessionKey) throws UnknownSessionException {        Serializable sessionId = getSessionId(sessionKey);        ServletRequest request = null;        if (sessionKey instanceof WebSessionKey) {            request = ((WebSessionKey) sessionKey).getServletRequest();        }        if (request != null && sessionId != null) {            Session session = (Session) request.getAttribute(sessionId.toString());            if (session != null) {                return session;            }        }        Session session = super.retrieveSession(sessionKey);        if (request != null && sessionId != null) {            request.setAttribute(sessionId.toString(), session);        }        return session;    }}