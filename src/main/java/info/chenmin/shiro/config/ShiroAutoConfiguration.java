/** * $Id: ShiroConfiguration.java,v 1.0 18/5/4 下午9:37 chenmin Exp $ * <p> */package info.chenmin.shiro.config;import info.chenmin.shiro.shiro.SelfDefinedSessionManager;import info.chenmin.shiro.util.DefaultFilterType;import lombok.extern.slf4j.Slf4j;import org.apache.shiro.authc.credential.HashedCredentialsMatcher;import org.apache.shiro.cache.CacheManager;import org.apache.shiro.cache.MemoryConstrainedCacheManager;import org.apache.shiro.mgt.SecurityManager;import org.apache.shiro.realm.Realm;import org.apache.shiro.session.mgt.SessionManager;import org.apache.shiro.session.mgt.eis.SessionDAO;import org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;import org.apache.shiro.spring.web.ShiroFilterFactoryBean;import org.apache.shiro.web.mgt.DefaultWebSecurityManager;import org.apache.shiro.web.session.mgt.DefaultWebSessionManager;import org.crazycake.shiro.IRedisManager;import org.crazycake.shiro.RedisCacheManager;import org.crazycake.shiro.RedisSessionDAO;import org.crazycake.shiro.serializer.StringSerializer;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.AutoConfigureAfter;import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;import org.springframework.boot.context.properties.EnableConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.ComponentScan;import org.springframework.context.annotation.Configuration;import org.springframework.util.ObjectUtils;import javax.servlet.Filter;import java.lang.reflect.Method;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;/** * @author chenmin * @version $Id: ShiroConfiguration.java,v 1.1 18/5/4 下午9:37 chenmin Exp $ * Created on 18/5/4 下午9:37 */@Slf4j@Configuration@ComponentScan(basePackages = "info.chenmin.shiro")@AutoConfigureAfter(ShiroRedisAutoConfiguration.class)@EnableConfigurationProperties({ShiroProperties.class})@ConditionalOnProperty(prefix = "security.shiro", name = "enabled", havingValue = "true", matchIfMissing = true)public class ShiroAutoConfiguration {    @Autowired    private ShiroProperties shiroProperties;    @Bean    @ConditionalOnMissingBean(ShiroFilterFactoryBean.class)    public ShiroFilterFactoryBean shiroFilterFactoryBean(SecurityManager securityManager) {        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();        // 获取filters        Map<String, Filter> defaultFilters = shiroFilterFactoryBean.getFilters();        // 将自定义 的FormAuthenticationFilter注入shiroFilter中        ShiroProperties.ShiroFilter shiroFilter = shiroProperties.getShiroFilter();        Map<DefaultFilterType, Class<? extends Filter>> filters = shiroFilter.getFilters();        Map<DefaultFilterType, Map<String, String>> attributes = shiroFilter.getAttributes();        filters.forEach((filterName, filterClass) -> {            try {                Map<String, String> attributeMap = attributes.get(filterName);                Filter filter = filterClass.newInstance();                if (!ObjectUtils.isEmpty(attributeMap)) {                    attributeMap.forEach((key, value) -> {                        try {                            Method setter = filterClass.getDeclaredMethod("set" + key.substring(0, 1).toUpperCase() + key.substring(1), String.class);                            setter.invoke(filter, value);                        } catch (Exception e) {                            log.warn("Is not found in the " + filterClass.getName() + "." + key + " property");                        }                    });                }                defaultFilters.put(filterName.toString(), filter);            } catch (Exception e) {                log.warn("Registered Filter of " + filterName + " is failure", e);            }        });        shiroFilterFactoryBean.setSecurityManager(securityManager);        Map<String, String> filterChainDefinitionMap = new LinkedHashMap<String, String>();        //注意过滤器配置顺序 不能颠倒        Map<DefaultFilterType, List<String>> filterPattern = shiroProperties.getFilterPattern();        filterPattern.forEach((filter, patterns) -> {            patterns.forEach(pattern -> {                filterChainDefinitionMap.put(pattern, filter.toString());            });        });        // 配置shiro默认登录界面地址，前后端分离中登录界面跳转应由前端路由控制，后台仅返回json数据        shiroFilterFactoryBean.setLoginUrl(shiroProperties.getLoginUrl());        shiroFilterFactoryBean.setUnauthorizedUrl(shiroProperties.getUnauthorizedUrl());        shiroFilterFactoryBean.setSuccessUrl(shiroProperties.getSuccessUrl());        shiroFilterFactoryBean.setFilters(defaultFilters);        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);        return shiroFilterFactoryBean;    }    /**     * 凭证匹配器(密码需要加密时，可使用)     * @return     */    @Bean    @ConditionalOnMissingBean(HashedCredentialsMatcher.class)    public HashedCredentialsMatcher hashedCredentialsMatcher() {        HashedCredentialsMatcher hashedCredentialsMatcher = new HashedCredentialsMatcher();        // 设置加密算法 Md5Hash        hashedCredentialsMatcher.setHashAlgorithmName("md5");        // 设置散列加密次数 如：2=md5(md5(aaa))        hashedCredentialsMatcher.setHashIterations(2);        return hashedCredentialsMatcher;    }    @Bean    @ConditionalOnBean(Realm.class)    @ConditionalOnMissingBean(SecurityManager.class)    public SecurityManager securityManager(            List<Realm> realms,            SessionManager sessionManager,            CacheManager redisCacheManager) {        DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();        securityManager.setRealms(realms);        // 自定义的Session管理        securityManager.setSessionManager(sessionManager);        // 自定义的缓存实现        securityManager.setCacheManager(redisCacheManager);        return securityManager;    }    /**     * 自定义的SessionManager     * @param redisSessionDAO     * @return     */    @Bean    public DefaultWebSessionManager sessionManager(SessionDAO redisSessionDAO) {        ShiroProperties.ShiroSession shiroSession = shiroProperties.getSession();        DefaultWebSessionManager sessionManager = new SelfDefinedSessionManager();        // 设置SessionDao        sessionManager.setSessionDAO(redisSessionDAO);        // 设置全局session超时时间        sessionManager.setGlobalSessionTimeout(shiroSession.getGlobalSessionTimeout() * 60 * 1000);        // 加入缓存管理器        sessionManager.setCacheManager(new MemoryConstrainedCacheManager());        // 删除过期的session        sessionManager.setDeleteInvalidSessions(shiroSession.getDeleteInvalidSessions());        // 是否定时检查session、        sessionManager.setSessionValidationSchedulerEnabled(shiroSession.getSessionValidationSchedulerEnabled());        // session是否可以被保存到cookie中        sessionManager.setSessionIdCookieEnabled(shiroSession.getSessionIdCookieEnabled());        // 是否去掉URL中的JSESSIONID        sessionManager.setSessionIdUrlRewritingEnabled(shiroSession.getSessionIdUrlRewritingEnabled());        return sessionManager;    }    /**     * cacheManager 缓存 redis实现     * 使用的是shiro-redis开源插件     * @param redisManager     * @return     */    @Bean    @ConditionalOnMissingBean(CacheManager.class)    public CacheManager redisCacheManager(IRedisManager redisManager) {        RedisCacheManager redisCacheManager = new RedisCacheManager();        redisCacheManager.setRedisManager(redisManager);        redisCacheManager.setValueSerializer(new StringSerializer());        return redisCacheManager;    }    /**     * RedisSessionDAO shiro sessionDao层的实现 redis实现     * 使用的是shiro-redis开源插件     * @param redisManager redis管理器     * @return     */    @Bean    @ConditionalOnMissingBean(SessionDAO.class)    public SessionDAO redisSessionDAO(IRedisManager redisManager) {        RedisSessionDAO redisSessionDAO = new RedisSessionDAO();        redisSessionDAO.setRedisManager(redisManager);        return redisSessionDAO;    }    /**     * 开启shiro aop注解支持     * @param securityManager 安全管理器     * @return     */    @Bean    @ConditionalOnProperty(name = "security.shiro.annotationEnabled", matchIfMissing = true)    public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(SecurityManager securityManager) {        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor =                new AuthorizationAttributeSourceAdvisor();        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);        return authorizationAttributeSourceAdvisor;    }}