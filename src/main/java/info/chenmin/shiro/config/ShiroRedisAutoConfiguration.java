/** * $Id: ShiroRedisAutoConfiguration.java,v 1.0 2019-01-23 14:45 chenmin Exp $ * <p> */package info.chenmin.shiro.config;import lombok.extern.slf4j.Slf4j;import org.crazycake.shiro.IRedisManager;import org.crazycake.shiro.RedisClusterManager;import org.crazycake.shiro.RedisManager;import org.crazycake.shiro.RedisSentinelManager;import org.springframework.beans.BeanUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;import org.springframework.boot.autoconfigure.data.redis.RedisProperties;import org.springframework.boot.context.properties.EnableConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Primary;import org.springframework.util.ObjectUtils;import org.springframework.util.StringUtils;import redis.clients.jedis.JedisPoolConfig;import java.util.List;/** * TODO 此类待优化 * 默认优先使用ShiroRedisProperties的配置，如果此配置不存在，则去寻找spring-boot-starter-data-redis的redisProperties配置 * @author 陈敏 * @version $Id: ShiroRedisAutoConfiguration.java,v 1.1 2019-01-23 14:45 chenmin Exp $ * Created on 2019-01-23 14:45 * My blog： https://www.chenmin.info */@Slf4j@Configurationpublic class ShiroRedisAutoConfiguration {    /**     * 此处优先     */    @Configuration    @ConditionalOnClass(RedisProperties.class)    @EnableConfigurationProperties({RedisProperties.class})    public static class ShiroRedisConfiguration {        @Autowired        private RedisProperties redisProperties;        /**         * 配置shiro redisManager         * 使用的是shiro-redis开源插件         * @return         */        @Bean        @ConditionalOnMissingBean(IRedisManager.class)        public IRedisManager redisManager() {            return createRedisManager();        }        private IRedisManager buildRedisManager() {            RedisManager redisManager = new RedisManager();            redisManager.setHost(redisProperties.getHost() + ":" + redisProperties.getPort());            redisManager.setTimeout(redisProperties.getTimeout() * 1000);            if (!ObjectUtils.isEmpty(redisProperties.getPassword())) {                redisManager.setPassword(redisProperties.getPassword());            }            redisManager.setDatabase(redisProperties.getDatabase());            redisManager.setJedisPoolConfig(jedisPoolConfig(getPool()));            return redisManager;        }        private IRedisManager buildRedisClusterManager() {            RedisClusterManager redisManager = new RedisClusterManager();            RedisProperties.Cluster clusterProperties = redisProperties.getCluster();            redisManager.setHost(hostAndPort(clusterProperties.getNodes()));            redisManager.setTimeout(redisProperties.getTimeout() * 1000);            if (!ObjectUtils.isEmpty(redisProperties.getPassword())) {                redisManager.setPassword(redisProperties.getPassword());            }            redisManager.setDatabase(redisProperties.getDatabase());            redisManager.setJedisPoolConfig(getJedisPoolConfig(getPool()));            return redisManager;        }        private IRedisManager buildRedisSentinelManager() {            RedisSentinelManager redisManager = new RedisSentinelManager();            RedisProperties.Sentinel sentinelProperties = redisProperties.getSentinel();            redisManager.setDatabase(redisProperties.getDatabase());            redisManager.setHost(sentinelProperties.getNodes());            if (!ObjectUtils.isEmpty(redisProperties.getPassword())) {                redisManager.setPassword(redisProperties.getPassword());            }            redisManager.setTimeout(redisProperties.getTimeout());            redisManager.setMasterName(sentinelProperties.getMaster());            redisManager.setJedisPoolConfig(getJedisPoolConfig(getPool()));            return redisManager;        }        private ShiroRedisProperties.Pool getPool() {            if (!ObjectUtils.isEmpty(redisProperties.getPool())) {                ShiroRedisProperties.Pool pool = new ShiroRedisProperties.Pool();                BeanUtils.copyProperties(this.redisProperties.getPool(), pool);                return pool;            }            return null;        }        private IRedisManager createRedisManager() {            if (!ObjectUtils.isEmpty(this.redisProperties.getCluster())) {                return buildRedisClusterManager();            }            if (!ObjectUtils.isEmpty(this.redisProperties.getSentinel())) {                return buildRedisSentinelManager();            }            return buildRedisManager();        }    }    @Primary    @Configuration    @EnableConfigurationProperties({ShiroRedisProperties.class})    @ConditionalOnProperty(name = "security.shiro.redis.enabled")    public static class ShiroConfiguration {        @Autowired        private ShiroRedisProperties shiroRedisProperties;        /**         * 配置shiro redisManager         * 使用的是shiro-redis开源插件         * @return         */        @Bean        @ConditionalOnMissingBean(IRedisManager.class)        public IRedisManager redisManager() {            return createRedisManager();        }        private IRedisManager buildRedisManager() {            RedisManager redisManager = new RedisManager();            redisManager.setHost(shiroRedisProperties.getHost() + ":" + shiroRedisProperties.getPort());            redisManager.setTimeout(shiroRedisProperties.getTimeout() * 1000);            if (!ObjectUtils.isEmpty(shiroRedisProperties.getPassword())) {                redisManager.setPassword(shiroRedisProperties.getPassword());            }            redisManager.setDatabase(shiroRedisProperties.getDatabase());            redisManager.setJedisPoolConfig(getJedisPoolConfig(shiroRedisProperties.getPool()));            return redisManager;        }        private IRedisManager buildRedisClusterManager() {            RedisClusterManager redisManager = new RedisClusterManager();            ShiroRedisProperties.Cluster clusterProperties = shiroRedisProperties.getCluster();            redisManager.setHost(hostAndPort(clusterProperties.getNodes()));            redisManager.setTimeout(shiroRedisProperties.getTimeout() * 1000);            if (!ObjectUtils.isEmpty(shiroRedisProperties.getPassword())) {                redisManager.setPassword(shiroRedisProperties.getPassword());            }            redisManager.setDatabase(shiroRedisProperties.getDatabase());            redisManager.setSoTimeout(shiroRedisProperties.getSoTimeout());            redisManager.setMaxAttempts(shiroRedisProperties.getMaxAttempts());            redisManager.setJedisPoolConfig(getJedisPoolConfig(shiroRedisProperties.getPool()));            return redisManager;        }        private IRedisManager buildRedisSentinelManager() {            RedisSentinelManager redisManager = new RedisSentinelManager();            ShiroRedisProperties.Sentinel sentinelProperties = shiroRedisProperties.getSentinel();            redisManager.setDatabase(shiroRedisProperties.getDatabase());            redisManager.setHost(sentinelProperties.getNodes());            if (!ObjectUtils.isEmpty(shiroRedisProperties.getPassword())) {                redisManager.setPassword(shiroRedisProperties.getPassword());            }            redisManager.setTimeout(shiroRedisProperties.getTimeout());            redisManager.setSoTimeout(shiroRedisProperties.getSoTimeout());            redisManager.setMasterName(sentinelProperties.getMaster());            redisManager.setJedisPoolConfig(getJedisPoolConfig(shiroRedisProperties.getPool()));            return redisManager;        }        private IRedisManager createRedisManager() {            if (!ObjectUtils.isEmpty(this.shiroRedisProperties.getCluster())) {                return buildRedisClusterManager();            }            if (!ObjectUtils.isEmpty(this.shiroRedisProperties.getSentinel())) {                return buildRedisSentinelManager();            }            return buildRedisManager();        }    }    private static String hostAndPort(List<String> nodes) {        return StringUtils.collectionToCommaDelimitedString(nodes);    }    private static JedisPoolConfig getJedisPoolConfig(ShiroRedisProperties.Pool props) {        return props != null ? jedisPoolConfig(props) : new JedisPoolConfig();    }    private static JedisPoolConfig jedisPoolConfig(ShiroRedisProperties.Pool props) {        JedisPoolConfig config = new JedisPoolConfig();        config.setMaxTotal(props.getMaxActive());        config.setMaxIdle(props.getMaxIdle());        config.setMinIdle(props.getMinIdle());        config.setMaxWaitMillis(props.getMaxWait());        return config;    }}