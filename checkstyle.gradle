/** * The Checkstyle Plugin * * Gradle plugin that performs quality checks on your project's Java source files using Checkstyle * and generates reports from these checks. * * Tasks: * Run Checkstyle against {rootDir}/src/main/java: ./gradlew checkstyleMain * Run Checkstyle against {rootDir}/src/test/java: ./gradlew checkstyleTest * * Reports: * Checkstyle reports can be found in {project.buildDir}/build/reports/checkstyle * * Configuration: * Checkstyle is very configurable. The configuration file is located at {rootDir}/config/checkstyle/checkstyle.xml * * Additional Documentation: * https://docs.gradle.org/current/userguide/checkstyle_plugin.html */apply plugin: 'findbugs'apply plugin: 'pmd'apply plugin: 'checkstyle'checkstyle {    // The version of the code quality tool to be used.    // The most recent version of Checkstyle can be found at https://github.com/checkstyle/checkstyle/releases    toolVersion = "8.8"    // The source sets to be analyzed as part of the check and build tasks.    // Use 'sourceSets = []' to remove Checkstyle from the check and build tasks.//    sourceSets = [project.sourceSets.main, project.sourceSets.test]    // Whether or not to allow the build to continue if there are warnings.    ignoreFailures = true    // Whether or not rule violations are to be displayed on the console.    showViolations = true    configFile = file("huawei_checkStyle.xml")    source = fileTree('src')    classpath = files()}task findbugs(type: FindBugs, dependsOn: 'compileDebugSources') {    classes = fileTree("build/intermediates/classes/debug/")    source = fileTree('src')    classpath = files()    ignoreFailures = true    //reportsDir = file("$project.buildDir/outputs/")    reportLevel = "medium"    effort = "max"    reports {        xml.enabled = true        html.enabled = false    }}task pmd (type: Pmd) {    ruleSets = [        'java-android',        'java-basic',        'java-braces',        'java-clone',        'java-codesize',        'java-comments',        'java-controversial',        'java-coupling',        'java-design',        'java-empty',        'java-finalizers',        'java-imports',        'java-j2ee',        'java-javabeans',        'java-junit',        'java-logging-jakarta-commons',        'java-logging-java',        'java-migrating',        'java-naming',        'java-optimizations',        'java-strictexception',        'java-strings',        'java-sunsecure',        'java-typeresolution',        'java-unnecessary',        'java-unusedcode'    ]    source = fileTree('src')    ignoreFailures = true    reports {        xml.enabled = true        html.enabled = false    }}